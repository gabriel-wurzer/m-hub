[
    {
        "id": "e8d2c400a518975b",
        "type": "tab",
        "label": "API",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "27011c5e3f9c0442",
        "type": "tab",
        "label": "Building by ID",
        "disabled": false,
        "locked": true,
        "info": "",
        "env": []
    },
    {
        "id": "407023a188d5f43b",
        "type": "tab",
        "label": "Update Building Structure",
        "disabled": false,
        "locked": true,
        "info": "",
        "env": []
    },
    {
        "id": "bc8f71868ee8d8a0",
        "type": "tab",
        "label": "Documents by BuildingID",
        "disabled": false,
        "locked": true,
        "info": "",
        "env": []
    },
    {
        "id": "b1df49c7184ded33",
        "type": "tab",
        "label": "Component by ID",
        "disabled": false,
        "locked": true,
        "info": "",
        "env": []
    },
    {
        "id": "ac18e646bf8d0c36",
        "type": "tab",
        "label": "Components by BuildingID",
        "disabled": false,
        "locked": true,
        "info": "",
        "env": []
    },
    {
        "id": "57d67887e6ddfe9a",
        "type": "tab",
        "label": "Documents by Component",
        "disabled": false,
        "locked": true,
        "info": "",
        "env": []
    },
    {
        "id": "7928a23a3a61c00d",
        "type": "tab",
        "label": "Buildings by User",
        "disabled": false,
        "locked": true,
        "info": "",
        "env": []
    },
    {
        "id": "16119a8b0b0654ef",
        "type": "tab",
        "label": "Building in User",
        "disabled": false,
        "locked": true,
        "info": "",
        "env": []
    },
    {
        "id": "0cd2d786f9f2ee5b",
        "type": "tab",
        "label": "Add Building to User",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ca28e1e423cf6c08",
        "type": "tab",
        "label": "Remove Building from User",
        "disabled": false,
        "locked": true,
        "info": "",
        "env": []
    },
    {
        "id": "38f9cc6750f8eb6f",
        "type": "tab",
        "label": "Parts by Building",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "334b2a9f8565f79d",
        "type": "tab",
        "label": "Part by ID",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "d0cf828cb89c2dcd",
        "type": "tab",
        "label": "Documents by Part",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "364c116a7e63a2e0",
        "type": "tab",
        "label": "Parts by Part",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "494a592c87260810",
        "type": "tab",
        "label": "User-specific Building Data by IDs",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f85e317b58138888",
        "type": "tab",
        "label": "Add User-specific Building Data",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cd2a82c3ad69ca34",
        "type": "tab",
        "label": "Update User-specific Building Data",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1248ce57789522dd",
        "type": "http in",
        "z": "e8d2c400a518975b",
        "name": "GET /test",
        "url": "/test",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 40,
        "wires": [
            [
                "9c7509f21076669f"
            ]
        ]
    },
    {
        "id": "9c7509f21076669f",
        "type": "template",
        "z": "e8d2c400a518975b",
        "name": "hello world (html)",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<html>\n    <head></head>\n    <body>\n        <h1>Hello World!</h1>\n    </body>\n</html>",
        "output": "str",
        "x": 290,
        "y": 40,
        "wires": [
            [
                "625e6556c0ae06ae"
            ]
        ]
    },
    {
        "id": "625e6556c0ae06ae",
        "type": "http response",
        "z": "e8d2c400a518975b",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 480,
        "y": 40,
        "wires": []
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "67e242a6fdfa39b6",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "open ifc file and convert to JSON",
        "func": "const ifcData = msg.payload\nconst ifcBuffer = new Uint8Array(ifcData)\nconst modelID = context.get(\"webIfc\").OpenModel(ifcBuffer)\nconst fragments = context.get(\"components\").get(OBC.FragmentsManager);\nconst fragmentIfcLoader = context.get(\"components\").get(OBC.IfcLoader);\nconst exported = await context.get(\"exporter\").export(context.get(\"webIfc\"), modelID)\ncontext.get(\"webIfc\").CloseModel(modelID)\nmsg.payload = exported\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Der Code hier wird ausgef√ºhrt,\n// wenn der Node gestartet wird\nconst components = new OBC.Components()\n//components.init()\ncontext.set(\"components\", components)\nconst exporter = components.get(OBC.IfcJsonExporter)\ncontext.set(\"exporter\", exporter)\n//node.log(JSON.stringify(exporter))\nconst webIfc = new WEBIFC.IfcAPI()\n//webIfc.SetWasmPath(\"https://unpkg.com/web-ifc@0.0.57/\", true)\n//webIfc.SetWasmPath(\"\",false)\n//node.log(util.inspect(webIfc))\nawait webIfc.Init()\ncontext.set(\"webIfc\", webIfc)\n//node.log(JSON.stringify(webIfc))\n//node.log('setup completed')\n",
        "finalize": "",
        "libs": [
            {
                "var": "OBC",
                "module": "@thatopen/components"
            },
            {
                "var": "WEBIFC",
                "module": "web-ifc"
            }
        ],
        "x": 220,
        "y": 280,
        "wires": [
            [
                "dd4e97322180a29f"
            ]
        ]
    },
    {
        "id": "29efd0853df6ee13",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "b8effc12f971c9b9"
            ]
        ]
    },
    {
        "id": "b8effc12f971c9b9",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "https://thatopen.github.io/engine_components/resources/small.ifc",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 310,
        "y": 220,
        "wires": [
            [
                "67e242a6fdfa39b6"
            ]
        ]
    },
    {
        "id": "284c6fc27e3ce9c2",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 340,
        "wires": []
    },
    {
        "id": "dd4e97322180a29f",
        "type": "file",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "filename": "/data/test.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 400,
        "y": 340,
        "wires": [
            [
                "284c6fc27e3ce9c2"
            ]
        ]
    },
    {
        "id": "e8ad80e4d0f32511",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "download https://thatopen.github.io/engine_components/resources/small.ifc",
        "info": "",
        "x": 500,
        "y": 180,
        "wires": []
    },
    {
        "id": "e49eac9b2532b6c4",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "save as test.json",
        "info": "",
        "x": 400,
        "y": 380,
        "wires": []
    },
    {
        "id": "2ad372cdad61e38b",
        "type": "http in",
        "z": "27011c5e3f9c0442",
        "name": "GET building",
        "url": "/api/building/:ID",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "1ffa461e79c2a7a7"
            ]
        ]
    },
    {
        "id": "0d8b2076de2cb5f5",
        "type": "function",
        "z": "27011c5e3f9c0442",
        "name": "find building by id",
        "func": "var buildingId = parseInt(msg.req.params.ID);  // Extract building ID from URL\nvar buildings = msg.payload;  // Loaded JSON file\n\n// Find the building with the correct \"bw_geb_id\"\nvar building = buildings.find(b => b.bw_geb_id === buildingId);\n\nif (!building) {\n    msg.payload = { error: `Building with ID '${buildingId}' not found` };\n    msg.statusCode = 404;\n    return [msg];\n}\n\n// Apply filtering\nmsg.payload = building;\n\nreturn [msg];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 360,
        "wires": [
            [
                "f301ee9a5dbd2bad"
            ]
        ]
    },
    {
        "id": "8f927269b5342aec",
        "type": "http response",
        "z": "27011c5e3f9c0442",
        "name": "building response",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 460,
        "wires": []
    },
    {
        "id": "1ffa461e79c2a7a7",
        "type": "file in",
        "z": "27011c5e3f9c0442",
        "name": "buildings.json",
        "filename": "/data/buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 240,
        "y": 260,
        "wires": [
            [
                "b3523b0ca03c53b8"
            ]
        ]
    },
    {
        "id": "b3523b0ca03c53b8",
        "type": "json",
        "z": "27011c5e3f9c0442",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 410,
        "y": 260,
        "wires": [
            [
                "0d8b2076de2cb5f5"
            ]
        ]
    },
    {
        "id": "320ab5806cc47a5d",
        "type": "comment",
        "z": "27011c5e3f9c0442",
        "name": "http://localhost:1880/api/building/ID",
        "info": "",
        "x": 240,
        "y": 100,
        "wires": []
    },
    {
        "id": "ed2ad698a995b590",
        "type": "comment",
        "z": "27011c5e3f9c0442",
        "name": "mock: fetch building with param ID",
        "info": "",
        "x": 720,
        "y": 300,
        "wires": []
    },
    {
        "id": "f301ee9a5dbd2bad",
        "type": "delay",
        "z": "27011c5e3f9c0442",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 460,
        "y": 460,
        "wires": [
            [
                "8f927269b5342aec"
            ]
        ]
    },
    {
        "id": "a2e77efc11f9785e",
        "type": "http in",
        "z": "407023a188d5f43b",
        "name": "PUT building structure",
        "url": "/api/building/:ID",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 120,
        "wires": [
            [
                "7f3aa380878ec28a"
            ]
        ]
    },
    {
        "id": "51338e97cc131e66",
        "type": "function",
        "z": "407023a188d5f43b",
        "name": "update building structure",
        "func": "const buildingId = parseInt(msg.req.params.ID); // Extract building ID from URL\nconst updatedBuilding = msg.payload;\nlet buildings = msg.buildings;\n\n// Validate required building properties\nif (!updatedBuilding || typeof updatedBuilding !== 'object') {\n    msg.statusCode = 400;\n    msg.payload = { error: 'Missing building payload.' };\n    return [null, msg];\n}\n\nconst index = buildings.findIndex(b => b.bw_geb_id === buildingId);\n\nif (index === -1) {\n    msg.statusCode = 404;\n    msg.payload = { error: `Building with ID '${buildingId}' not found.` };\n    return [null, msg];\n}\n\n// Replace entire building object\nupdatedBuilding.bw_geb_id = buildingId; // Ensure ID remains consistent\nbuildings[index] = updatedBuilding;\n\n// Output 1: write full array\nconst writeMsg = { payload: JSON.stringify(buildings, null, 2) };\n\n// Output 2: response with updated building\nmsg.statusCode = 200;\nmsg.payload = updatedBuilding;\n\nreturn [writeMsg, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 440,
        "wires": [
            [
                "5789ec208fc9cc61"
            ],
            [
                "4261897e6d6f9d07"
            ]
        ]
    },
    {
        "id": "466889aa62a2d4e3",
        "type": "http response",
        "z": "407023a188d5f43b",
        "name": "update request response",
        "statusCode": "",
        "headers": {},
        "x": 950,
        "y": 500,
        "wires": []
    },
    {
        "id": "7f3aa380878ec28a",
        "type": "file in",
        "z": "407023a188d5f43b",
        "name": "buildings.json",
        "filename": "/data/buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "f9913b5180bc4f1c"
            ]
        ]
    },
    {
        "id": "f9913b5180bc4f1c",
        "type": "json",
        "z": "407023a188d5f43b",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 450,
        "y": 220,
        "wires": [
            [
                "5ecc60292f81cb83"
            ]
        ]
    },
    {
        "id": "e9d07dbe582dc974",
        "type": "comment",
        "z": "407023a188d5f43b",
        "name": "http://localhost:1880/api/building/ID",
        "info": "",
        "x": 280,
        "y": 60,
        "wires": []
    },
    {
        "id": "0fee26345dbd2d83",
        "type": "comment",
        "z": "407023a188d5f43b",
        "name": "mock: patch update building structure",
        "info": "",
        "x": 790,
        "y": 260,
        "wires": []
    },
    {
        "id": "4261897e6d6f9d07",
        "type": "delay",
        "z": "407023a188d5f43b",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 720,
        "y": 500,
        "wires": [
            [
                "466889aa62a2d4e3"
            ]
        ]
    },
    {
        "id": "5789ec208fc9cc61",
        "type": "file",
        "z": "407023a188d5f43b",
        "name": "updated buildings.json",
        "filename": "/data/buildings.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 740,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "5ecc60292f81cb83",
        "type": "function",
        "z": "407023a188d5f43b",
        "name": "pre-function",
        "func": "msg.buildings = msg.payload;\nmsg.payload = msg.req.body;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 340,
        "wires": [
            [
                "51338e97cc131e66"
            ]
        ]
    },
    {
        "id": "3c129ba07320274b",
        "type": "http in",
        "z": "bc8f71868ee8d8a0",
        "name": "GET building documents",
        "url": "/api/building/:ID/documents",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "cb482042e1d86a02"
            ]
        ]
    },
    {
        "id": "49d964f8fce72ce6",
        "type": "function",
        "z": "bc8f71868ee8d8a0",
        "name": "extract documents",
        "func": "var buildingId = parseInt(msg.req.params.ID);  // Extract building ID from URL\nvar buildings = msg.payload;  // Loaded JSON file\n\n// Find the building with the correct \"bw_geb_id\"\nvar building = buildings.find(b => b.bw_geb_id === buildingId);\n\nif (!building) {\n    msg.payload = { error: `Building with ID '${buildingId}' not found` };\n    msg.statusCode = 404;\n    return [msg];\n}\n\n// Start collecting documents\nlet documents = [];\n\n// Add top-level building documents\nif (Array.isArray(building.documents)) {\n    documents = documents.concat(building.documents);\n}\n\n// Add documents from each buildingComponent\nif (Array.isArray(building.buildingComponents)) {\n    for (let component of building.buildingComponents) {\n        if (Array.isArray(component.documents)) {\n            documents = documents.concat(component.documents);\n        }\n    }\n}\n\nmsg.payload = documents;\nreturn [msg];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 400,
        "wires": [
            [
                "913d48767b346272"
            ]
        ]
    },
    {
        "id": "913d48767b346272",
        "type": "http response",
        "z": "bc8f71868ee8d8a0",
        "name": "documents response",
        "statusCode": "",
        "headers": {},
        "x": 400,
        "y": 500,
        "wires": []
    },
    {
        "id": "cb482042e1d86a02",
        "type": "file in",
        "z": "bc8f71868ee8d8a0",
        "name": "buildings.json",
        "filename": "/data/buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 160,
        "y": 300,
        "wires": [
            [
                "4254b6e7778df55b"
            ]
        ]
    },
    {
        "id": "4254b6e7778df55b",
        "type": "json",
        "z": "bc8f71868ee8d8a0",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 300,
        "wires": [
            [
                "49d964f8fce72ce6"
            ]
        ]
    },
    {
        "id": "b8b50779ec0b04a0",
        "type": "comment",
        "z": "bc8f71868ee8d8a0",
        "name": "http://localhost:1880/api/building/ID/documents",
        "info": "",
        "x": 190,
        "y": 140,
        "wires": []
    },
    {
        "id": "521eb13470c47853",
        "type": "comment",
        "z": "bc8f71868ee8d8a0",
        "name": "mock: fetch documents for building with param ID",
        "info": "",
        "x": 680,
        "y": 340,
        "wires": []
    },
    {
        "id": "7ad6badf4ae5091e",
        "type": "http in",
        "z": "b1df49c7184ded33",
        "name": "GET building-component",
        "url": "/api/component/:ID",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 180,
        "wires": [
            [
                "471960e37c1d3a39"
            ]
        ]
    },
    {
        "id": "fa2fc321647a0a3d",
        "type": "http response",
        "z": "b1df49c7184ded33",
        "name": "building-component response",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 480,
        "wires": []
    },
    {
        "id": "471960e37c1d3a39",
        "type": "file in",
        "z": "b1df49c7184ded33",
        "name": "buildings.json",
        "filename": "/data/buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 240,
        "y": 280,
        "wires": [
            [
                "a76e0c7d529b20d9"
            ]
        ]
    },
    {
        "id": "a76e0c7d529b20d9",
        "type": "json",
        "z": "b1df49c7184ded33",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 410,
        "y": 280,
        "wires": [
            [
                "a3ed23e521fe0d08"
            ]
        ]
    },
    {
        "id": "a63770cd71c53057",
        "type": "comment",
        "z": "b1df49c7184ded33",
        "name": "http://localhost:1880/api/component/ID",
        "info": "",
        "x": 250,
        "y": 120,
        "wires": []
    },
    {
        "id": "6a3faf00d23c2935",
        "type": "comment",
        "z": "b1df49c7184ded33",
        "name": "mock: fetch building-component with param ID",
        "info": "",
        "x": 750,
        "y": 320,
        "wires": []
    },
    {
        "id": "747506942604e96a",
        "type": "delay",
        "z": "b1df49c7184ded33",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 480,
        "y": 480,
        "wires": [
            [
                "fa2fc321647a0a3d"
            ]
        ]
    },
    {
        "id": "a3ed23e521fe0d08",
        "type": "function",
        "z": "b1df49c7184ded33",
        "name": "find building-component by id",
        "func": "// Get the component ID from the request parameters\nconst componentId = msg.req.params.ID;\n\n// Access the full buildings array (from buildings.json)\nconst buildings = msg.payload;\n\n// Search through all buildingComponents in all buildings\nlet foundComponent = null;\n\nfor (const building of buildings) {\n    if (Array.isArray(building.buildingComponents)) {\n        for (const component of building.buildingComponents) {\n            if (component.id === componentId) {\n                foundComponent = component;\n                break;\n            }\n        }\n    }\n\n    if (foundComponent) break;\n}\n\n// Return the component or a 404 if not found\nif (foundComponent) {\n    msg.payload = foundComponent;\n    return msg;\n} else {\n    msg.statusCode = 404;\n    msg.payload = { error: `Component with ID '${componentId}' not found` };\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 380,
        "wires": [
            [
                "747506942604e96a"
            ]
        ]
    },
    {
        "id": "3fc16a751fac0ce4",
        "type": "http in",
        "z": "ac18e646bf8d0c36",
        "name": "GET building components",
        "url": "/api/building/:ID/components",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 160,
        "wires": [
            [
                "da02924c65ed6de3"
            ]
        ]
    },
    {
        "id": "a0b078e726d40da0",
        "type": "function",
        "z": "ac18e646bf8d0c36",
        "name": "extract building components",
        "func": "var buildingId = parseInt(msg.req.params.ID);  // Extract building ID from URL\nvar buildings = msg.payload;  // Loaded JSON file\n\n// Find the building with the correct \"bw_geb_id\"\nvar building = buildings.find(b => b.bw_geb_id === buildingId);\n\nif (!building) {\n    msg.payload = { error: `Building with ID '${buildingId}' not found` };\n    msg.statusCode = 404;\n    return [msg];\n}\n\n// Just return the components directly\nmsg.payload = building.buildingComponents || [];\n\nreturn [msg];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 360,
        "wires": [
            [
                "ed4c299ed36a7f44"
            ]
        ]
    },
    {
        "id": "ed4c299ed36a7f44",
        "type": "http response",
        "z": "ac18e646bf8d0c36",
        "name": "components response",
        "statusCode": "",
        "headers": {},
        "x": 480,
        "y": 460,
        "wires": []
    },
    {
        "id": "da02924c65ed6de3",
        "type": "file in",
        "z": "ac18e646bf8d0c36",
        "name": "buildings.json",
        "filename": "/data/buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 220,
        "y": 260,
        "wires": [
            [
                "407d19d480f0bb3a"
            ]
        ]
    },
    {
        "id": "407d19d480f0bb3a",
        "type": "json",
        "z": "ac18e646bf8d0c36",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 390,
        "y": 260,
        "wires": [
            [
                "a0b078e726d40da0"
            ]
        ]
    },
    {
        "id": "8fd6c4c6a8c5041e",
        "type": "comment",
        "z": "ac18e646bf8d0c36",
        "name": "http://localhost:1880/api/building/ID/components",
        "info": "",
        "x": 260,
        "y": 100,
        "wires": []
    },
    {
        "id": "d004c89ae82233a4",
        "type": "comment",
        "z": "ac18e646bf8d0c36",
        "name": "mock: fetch components for building with param ID",
        "info": "",
        "x": 750,
        "y": 300,
        "wires": []
    },
    {
        "id": "3a3e6d1a077cbf77",
        "type": "http in",
        "z": "57d67887e6ddfe9a",
        "name": "GET building-component documents",
        "url": "/api/component/:ID/documents",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 140,
        "wires": [
            [
                "9d1992cfaaf486a1"
            ]
        ]
    },
    {
        "id": "04254c8bede6eb55",
        "type": "function",
        "z": "57d67887e6ddfe9a",
        "name": "extract documents",
        "func": "// Get the component ID from the request parameters\nconst componentId = msg.req.params.ID;\n\n// Access the full buildings array (from buildings.json)\nconst buildings = msg.payload;\n\n// Search through all buildingComponents in all buildings\nlet foundComponent = null;\n\nfor (const building of buildings) {\n    if (Array.isArray(building.buildingComponents)) {\n        for (const component of building.buildingComponents) {\n            if (component.id === componentId) {\n                foundComponent = component;\n                break;\n            }\n        }\n    }\n\n    if (foundComponent) break;\n}\n\n// Return the component's documents or a 404 if not found or no documents\nif (foundComponent) {\n    const documents = foundComponent.documents || [];  // default to empty array if undefined\n    msg.payload = documents;\n    return msg;\n} else {\n    msg.statusCode = 404;\n    msg.payload = { error: `Component with ID '${componentId}' not found` };\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 340,
        "wires": [
            [
                "364cdf4871d3fc7f"
            ]
        ]
    },
    {
        "id": "364cdf4871d3fc7f",
        "type": "http response",
        "z": "57d67887e6ddfe9a",
        "name": "documents response",
        "statusCode": "",
        "headers": {},
        "x": 440,
        "y": 440,
        "wires": []
    },
    {
        "id": "9d1992cfaaf486a1",
        "type": "file in",
        "z": "57d67887e6ddfe9a",
        "name": "buildings.json",
        "filename": "/data/buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 200,
        "y": 240,
        "wires": [
            [
                "9e3759ad5a14c662"
            ]
        ]
    },
    {
        "id": "9e3759ad5a14c662",
        "type": "json",
        "z": "57d67887e6ddfe9a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 370,
        "y": 240,
        "wires": [
            [
                "04254c8bede6eb55"
            ]
        ]
    },
    {
        "id": "a5e9b8b30a94858e",
        "type": "comment",
        "z": "57d67887e6ddfe9a",
        "name": "http://localhost:1880/api/component/ID/documents",
        "info": "",
        "x": 250,
        "y": 80,
        "wires": []
    },
    {
        "id": "f2e61bdcfff91ebf",
        "type": "comment",
        "z": "57d67887e6ddfe9a",
        "name": "mock: fetch documents for building-component with param ID",
        "info": "",
        "x": 760,
        "y": 280,
        "wires": []
    },
    {
        "id": "1a99ee929f4bb38f",
        "type": "http in",
        "z": "7928a23a3a61c00d",
        "name": "GET buildings",
        "url": "/api/user/:ID/buildings",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 240,
        "wires": [
            [
                "d22ab6e80db60931",
                "2e17b7bfa269882e"
            ]
        ]
    },
    {
        "id": "cd3718c20e42d278",
        "type": "http response",
        "z": "7928a23a3a61c00d",
        "name": "building response",
        "statusCode": "",
        "headers": {},
        "x": 1210,
        "y": 600,
        "wires": []
    },
    {
        "id": "d22ab6e80db60931",
        "type": "file in",
        "z": "7928a23a3a61c00d",
        "name": "users.json",
        "filename": "/data/users.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 330,
        "y": 180,
        "wires": [
            [
                "3826fe9dee562d15"
            ]
        ]
    },
    {
        "id": "3826fe9dee562d15",
        "type": "json",
        "z": "7928a23a3a61c00d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 180,
        "wires": [
            [
                "0f98f914243af5cb"
            ]
        ]
    },
    {
        "id": "606c6a672845dccd",
        "type": "comment",
        "z": "7928a23a3a61c00d",
        "name": "http://localhost:1880/api/user/UID/buildings",
        "info": "",
        "x": 220,
        "y": 80,
        "wires": []
    },
    {
        "id": "15451039e043dbed",
        "type": "comment",
        "z": "7928a23a3a61c00d",
        "name": "mock: fetch buildings with param userId",
        "info": "",
        "x": 1320,
        "y": 500,
        "wires": []
    },
    {
        "id": "423d647526ab999d",
        "type": "delay",
        "z": "7928a23a3a61c00d",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 980,
        "y": 600,
        "wires": [
            [
                "cd3718c20e42d278"
            ]
        ]
    },
    {
        "id": "4bc6e44fe1289e18",
        "type": "function",
        "z": "7928a23a3a61c00d",
        "name": "find buildings by userId",
        "func": "// Extract user ID parameter from msg.req.params\nconst userId = msg.req.params.ID;\n\nconst users = msg.payload.users;\nconst buildings = msg.payload.buildings;\n\n// Check if the payload (users array) is valid\nif (!Array.isArray(users)) {\n    msg.statusCode = 500;\n    msg.payload = { error: \"Invalid users data\" };\n    return msg;\n}\n\nif (!Array.isArray(buildings)) {\n    msg.statusCode = 500;\n    msg.payload = { error: \"Invalid buildings data\" };\n    return msg;\n}\n\n// Find the user by ID\nconst user = users.find(u => u.id === userId);\n\nif (!user) {\n    msg.statusCode = 404;\n    msg.payload = { exists: false, error: `User with ID '${userId}' not found` };\n    return msg;\n}\n\n// user.buildings is an array of building IDs\nconst userBuildingIds = user.buildings || [];\n\n// Map building IDs to full building objects\nconst userBuildings = buildings.filter(b => userBuildingIds.includes(b.bw_geb_id));\n\nmsg.payload = userBuildings;\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 440,
        "wires": [
            [
                "423d647526ab999d",
                "4514d061075f37b0"
            ]
        ]
    },
    {
        "id": "2e17b7bfa269882e",
        "type": "file in",
        "z": "7928a23a3a61c00d",
        "name": "buildings.json",
        "filename": "/data/buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 320,
        "y": 300,
        "wires": [
            [
                "ac341b81be71a03d"
            ]
        ]
    },
    {
        "id": "ac341b81be71a03d",
        "type": "json",
        "z": "7928a23a3a61c00d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 300,
        "wires": [
            [
                "1ba15a5faebb6c4b"
            ]
        ]
    },
    {
        "id": "0f98f914243af5cb",
        "type": "change",
        "z": "7928a23a3a61c00d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "users",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 180,
        "wires": [
            [
                "df749ecb61ebd22b"
            ]
        ]
    },
    {
        "id": "1ba15a5faebb6c4b",
        "type": "change",
        "z": "7928a23a3a61c00d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "buildings",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 300,
        "wires": [
            [
                "648a7d4d9ceb65fb"
            ]
        ]
    },
    {
        "id": "df749ecb61ebd22b",
        "type": "change",
        "z": "7928a23a3a61c00d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "users",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 180,
        "wires": [
            [
                "a0e9a47e42bd9f37",
                "ce1b7a5dcfbc1613"
            ]
        ]
    },
    {
        "id": "648a7d4d9ceb65fb",
        "type": "change",
        "z": "7928a23a3a61c00d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "buildings",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 300,
        "wires": [
            [
                "ce1b7a5dcfbc1613"
            ]
        ]
    },
    {
        "id": "a0e9a47e42bd9f37",
        "type": "debug",
        "z": "7928a23a3a61c00d",
        "name": "debug users data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 60,
        "wires": []
    },
    {
        "id": "ce1b7a5dcfbc1613",
        "type": "join",
        "z": "7928a23a3a61c00d",
        "name": "join inputs",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1190,
        "y": 240,
        "wires": [
            [
                "6e9c380429b5809e",
                "4bc6e44fe1289e18"
            ]
        ]
    },
    {
        "id": "6e9c380429b5809e",
        "type": "debug",
        "z": "7928a23a3a61c00d",
        "name": "debug join data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 200,
        "wires": []
    },
    {
        "id": "4514d061075f37b0",
        "type": "debug",
        "z": "7928a23a3a61c00d",
        "name": "debug response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 400,
        "wires": []
    },
    {
        "id": "87161bccab4bd3aa",
        "type": "http in",
        "z": "16119a8b0b0654ef",
        "name": "GET building in user",
        "url": "/api/user/:userId/buildings/:buildingId/exists",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "cd451dcc92ad85ec"
            ]
        ]
    },
    {
        "id": "68642bc661dfd2df",
        "type": "function",
        "z": "16119a8b0b0654ef",
        "name": "check if building exists in user buildings",
        "func": "// Extract path parameters from msg.req.params\nconst userId = msg.req.params.userId;\nconst buildingId = parseInt(msg.req.params.buildingId);\n\n// Check if the payload (users array) is valid\nif (!Array.isArray(msg.payload)) {\n    msg.statusCode = 500;\n    msg.payload = { error: \"Invalid users data\" };\n    return msg;\n}\n\n// Find the user by ID\nconst user = msg.payload.find(u => u.id === userId);\n\nif (!user) {\n    msg.statusCode = 404;\n    msg.payload = { exists: false, error: `User with ID '${userId}' not found` };\n    return msg;\n}\n\n// Check if building ID is in user's buildings array\nconst exists = Array.isArray(user.buildings) && user.buildings.includes(buildingId);\n\n// Return boolean as JSON\nmsg.payload = exists.toString();\nmsg.statusCode = 200;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 320,
        "wires": [
            [
                "a47c9c685b1f861c"
            ]
        ]
    },
    {
        "id": "97faa15e1922b1d8",
        "type": "http response",
        "z": "16119a8b0b0654ef",
        "name": "building in user response",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 420,
        "wires": []
    },
    {
        "id": "cd451dcc92ad85ec",
        "type": "file in",
        "z": "16119a8b0b0654ef",
        "name": "users.json",
        "filename": "/data/users.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 210,
        "y": 220,
        "wires": [
            [
                "41b9ecc42da04bd8"
            ]
        ]
    },
    {
        "id": "41b9ecc42da04bd8",
        "type": "json",
        "z": "16119a8b0b0654ef",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 390,
        "y": 220,
        "wires": [
            [
                "68642bc661dfd2df"
            ]
        ]
    },
    {
        "id": "ab81e89fd21e376e",
        "type": "comment",
        "z": "16119a8b0b0654ef",
        "name": "http://localhost:1880/api/user/UID/buildings/BID/exists",
        "info": "",
        "x": 280,
        "y": 60,
        "wires": []
    },
    {
        "id": "d1c8504c8886d058",
        "type": "comment",
        "z": "16119a8b0b0654ef",
        "name": "mock: check if building param buildingId exists",
        "info": "",
        "x": 730,
        "y": 260,
        "wires": []
    },
    {
        "id": "a47c9c685b1f861c",
        "type": "delay",
        "z": "16119a8b0b0654ef",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 420,
        "wires": [
            [
                "97faa15e1922b1d8"
            ]
        ]
    },
    {
        "id": "40e4e7158283284d",
        "type": "http in",
        "z": "0cd2d786f9f2ee5b",
        "name": "POST add building",
        "url": "/api/user/:UID/buildings",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "d4910f247512e86a"
            ]
        ]
    },
    {
        "id": "17384baf5cf51a55",
        "type": "function",
        "z": "0cd2d786f9f2ee5b",
        "name": "append building to user",
        "func": "// Extract user ID parameter from msg.req.params\nconst userId = msg.req.params.UID;\n\n// Extract building ID payload from msg.payload\nconst buildingId =  parseInt(msg.payload.buildingId);\n\nconst users = msg.users;\n\n// Find user by ID\nconst user = users.find(u => u.id === userId);\n\nif (!user) {\n    msg.statusCode = 404;\n    msg.payload = { error: `User with ID '${userId}' not found` };\n    return [null, msg];\n}\n\n// Ensure buildings is an array\nif (!Array.isArray(user.buildings)) {\n    user.buildings = [];\n}\n\n// Append only if not already present to avoid duplicates\nif (!user.buildings.includes(buildingId)) {\n    user.buildings.push(buildingId);\n}\n\n// Output 1: write entire updated users array to file\nconst writeMsg = { payload: JSON.stringify(users, null, 2) };\n\n// Output 2: respond to client ‚Äî reuse original msg to preserve req/res context\nmsg.statusCode = 200;\nmsg.payload = user;\n\nreturn [writeMsg, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 460,
        "wires": [
            [
                "870eeba346f6ccc9"
            ],
            [
                "a49af9af0629b6cb"
            ]
        ]
    },
    {
        "id": "afefbf7ab5b161c5",
        "type": "http response",
        "z": "0cd2d786f9f2ee5b",
        "name": "buildings array response",
        "statusCode": "",
        "headers": {},
        "x": 870,
        "y": 520,
        "wires": []
    },
    {
        "id": "d4910f247512e86a",
        "type": "file in",
        "z": "0cd2d786f9f2ee5b",
        "name": "users.json",
        "filename": "/data/users.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 190,
        "y": 240,
        "wires": [
            [
                "3ee93f57c37545f0"
            ]
        ]
    },
    {
        "id": "3ee93f57c37545f0",
        "type": "json",
        "z": "0cd2d786f9f2ee5b",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 370,
        "y": 240,
        "wires": [
            [
                "4d363dfea9a48309"
            ]
        ]
    },
    {
        "id": "9d527f52b2ee5208",
        "type": "comment",
        "z": "0cd2d786f9f2ee5b",
        "name": "http://localhost:1880/api/user/UID/buildings",
        "info": "",
        "x": 220,
        "y": 80,
        "wires": []
    },
    {
        "id": "78f8737e64888d41",
        "type": "comment",
        "z": "0cd2d786f9f2ee5b",
        "name": "mock: append buildingId (payload) to user with userId (param)",
        "info": "",
        "x": 660,
        "y": 320,
        "wires": []
    },
    {
        "id": "a49af9af0629b6cb",
        "type": "delay",
        "z": "0cd2d786f9f2ee5b",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 520,
        "wires": [
            [
                "afefbf7ab5b161c5"
            ]
        ]
    },
    {
        "id": "4d363dfea9a48309",
        "type": "function",
        "z": "0cd2d786f9f2ee5b",
        "name": "pre-function",
        "func": "msg.users = msg.payload;\nmsg.payload = msg.req.body;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 340,
        "wires": [
            [
                "17384baf5cf51a55"
            ]
        ]
    },
    {
        "id": "870eeba346f6ccc9",
        "type": "file",
        "z": "0cd2d786f9f2ee5b",
        "name": "updated user.json",
        "filename": "/data/users.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 610,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "7bdeb83320e15b3a",
        "type": "http in",
        "z": "ca28e1e423cf6c08",
        "name": "DELETE building",
        "url": "/api/user/:UID/buildings/:BID",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 160,
        "wires": [
            [
                "9b9a4935cb6f1f61"
            ]
        ]
    },
    {
        "id": "cc19f1e2185367fa",
        "type": "function",
        "z": "ca28e1e423cf6c08",
        "name": "append building to user",
        "func": "// Extract user and building ID parameters from msg.req.params\nconst userId = msg.req.params.UID;\nconst buildingId = parseInt(msg.req.params.BID);\n\nconst users = msg.payload;\n\n// Find user by ID\nconst user = users.find(u => u.id === userId);\n\nif (!user) {\n    msg.statusCode = 404;\n    msg.payload = { error: `User with ID '${userId}' not found` };\n    return [null, msg];\n}\n\n// Ensure buildings is an array\nif (!Array.isArray(user.buildings)) {\n    user.buildings = [];\n}\n\n// Remove the building ID if it exists\nconst index = user.buildings.indexOf(buildingId);\nif (index !== -1) {\n    user.buildings.splice(index, 1); // Remove one item at that index\n}\n\n// Prepare output 1: Updated full users array (write to file)\nconst writeMsg = {\n    payload: JSON.stringify(users, null, 2)\n};\n\n// Prepare output 2: Success response with updated user\nmsg.statusCode = 200;\nmsg.payload = user;\n\nreturn [writeMsg, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 380,
        "wires": [
            [
                "0d03d9784e5768c6"
            ],
            [
                "996ce82d3115534d"
            ]
        ]
    },
    {
        "id": "6e4af95c1e140b91",
        "type": "http response",
        "z": "ca28e1e423cf6c08",
        "name": "buildings array response",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 420,
        "wires": []
    },
    {
        "id": "9b9a4935cb6f1f61",
        "type": "file in",
        "z": "ca28e1e423cf6c08",
        "name": "users.json",
        "filename": "/data/users.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 330,
        "y": 260,
        "wires": [
            [
                "c4955c234c812ad1"
            ]
        ]
    },
    {
        "id": "c4955c234c812ad1",
        "type": "json",
        "z": "ca28e1e423cf6c08",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 260,
        "wires": [
            [
                "cc19f1e2185367fa"
            ]
        ]
    },
    {
        "id": "8d92558f6b2ec9ec",
        "type": "comment",
        "z": "ca28e1e423cf6c08",
        "name": "http://localhost:1880/api/user/UID/buildings/BID",
        "info": "",
        "x": 380,
        "y": 100,
        "wires": []
    },
    {
        "id": "b85ab86c9d240e19",
        "type": "comment",
        "z": "ca28e1e423cf6c08",
        "name": "mock: remove buildingId from user with userId",
        "info": "",
        "x": 850,
        "y": 260,
        "wires": []
    },
    {
        "id": "996ce82d3115534d",
        "type": "delay",
        "z": "ca28e1e423cf6c08",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 780,
        "y": 420,
        "wires": [
            [
                "6e4af95c1e140b91"
            ]
        ]
    },
    {
        "id": "0d03d9784e5768c6",
        "type": "file",
        "z": "ca28e1e423cf6c08",
        "name": "updated user.json",
        "filename": "/data/users.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 790,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "f24d3eb7fd564ece",
        "type": "http in",
        "z": "38f9cc6750f8eb6f",
        "name": "GET building parts",
        "url": "/api/building/:id/parts",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 180,
        "wires": [
            [
                "7c9eecbf76fd44f4"
            ]
        ]
    },
    {
        "id": "90f4d4ea437e84c0",
        "type": "function",
        "z": "38f9cc6750f8eb6f",
        "name": "extract building parts",
        "func": "var buildingId = parseInt(msg.req.params.id);  // Extract building ID from URL\nvar buildings = msg.payload;  // Loaded JSON file\n\n// Find the building with the correct \"bw_geb_id\"\nvar building = buildings.find(b => b.bw_geb_id === buildingId);\n\nif (!building) {\n    msg.payload = { error: \"Building not found\" };\n    msg.statusCode = 404;\n    return [msg];\n}\n\n// Recursive function to **filter** building parts while maintaining hierarchy\nfunction filterBuildingParts(parts) {\n    return parts\n        .filter(part => part.type === \"building_part\")  // Keep only \"building_part\"\n        .map(part => ({\n            ...part,\n            buildingParts: filterBuildingParts(part.buildingParts || []) // Recursively filter children\n        }));\n}\n\n// Apply filtering\nmsg.payload = filterBuildingParts(building.buildingParts || []);\n\nreturn [msg];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 380,
        "wires": [
            [
                "541d93095bb5472d"
            ]
        ]
    },
    {
        "id": "541d93095bb5472d",
        "type": "http response",
        "z": "38f9cc6750f8eb6f",
        "name": "parts response",
        "statusCode": "",
        "headers": {},
        "x": 500,
        "y": 480,
        "wires": []
    },
    {
        "id": "7c9eecbf76fd44f4",
        "type": "file in",
        "z": "38f9cc6750f8eb6f",
        "name": "buildings.json",
        "filename": "/data/buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 260,
        "y": 280,
        "wires": [
            [
                "426d12c6563467b5"
            ]
        ]
    },
    {
        "id": "426d12c6563467b5",
        "type": "json",
        "z": "38f9cc6750f8eb6f",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 430,
        "y": 280,
        "wires": [
            [
                "90f4d4ea437e84c0"
            ]
        ]
    },
    {
        "id": "aca210ea30b6f97f",
        "type": "comment",
        "z": "38f9cc6750f8eb6f",
        "name": "http://localhost:1880/api/building/ID/parts",
        "info": "",
        "x": 280,
        "y": 120,
        "wires": []
    },
    {
        "id": "581b56679cf62dc8",
        "type": "comment",
        "z": "38f9cc6750f8eb6f",
        "name": "mock: fetch parts for building with param ID",
        "info": "",
        "x": 760,
        "y": 320,
        "wires": []
    },
    {
        "id": "01d1ad3529f51439",
        "type": "http in",
        "z": "334b2a9f8565f79d",
        "name": "GET building-part",
        "url": "/api/building-part/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "60eea413552f2d46"
            ]
        ]
    },
    {
        "id": "2570eeb4e26197f4",
        "type": "http response",
        "z": "334b2a9f8565f79d",
        "name": "building-part response",
        "statusCode": "",
        "headers": {},
        "x": 720,
        "y": 440,
        "wires": []
    },
    {
        "id": "60eea413552f2d46",
        "type": "file in",
        "z": "334b2a9f8565f79d",
        "name": "buildings.json",
        "filename": "/data/buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 200,
        "y": 240,
        "wires": [
            [
                "7b2ee4e7b5864abe"
            ]
        ]
    },
    {
        "id": "7b2ee4e7b5864abe",
        "type": "json",
        "z": "334b2a9f8565f79d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 370,
        "y": 240,
        "wires": [
            [
                "bda01bb61954ae53"
            ]
        ]
    },
    {
        "id": "c2640dc94c04f102",
        "type": "comment",
        "z": "334b2a9f8565f79d",
        "name": "http://localhost:1880/api/building-part/ID",
        "info": "",
        "x": 210,
        "y": 80,
        "wires": []
    },
    {
        "id": "c0292531d792070b",
        "type": "comment",
        "z": "334b2a9f8565f79d",
        "name": "mock: fetch building-part with param ID",
        "info": "",
        "x": 690,
        "y": 280,
        "wires": []
    },
    {
        "id": "bda01bb61954ae53",
        "type": "function",
        "z": "334b2a9f8565f79d",
        "name": "find building-part by id",
        "func": "var buildingPartId = msg.req.params.id;  // Extract building ID from URL\nvar buildings = msg.payload;  // Loaded JSON file\n\nfunction findBuildingPartById(parts, id) {\n    for (let part of parts) {\n        if (part.id === id) return part;\n        if (part.buildingParts) {\n            const found = findBuildingPartById(part.buildingParts, id);\n            if (found) return found;\n        }\n    }\n    return null;\n}\n\n// Search through each building\nlet foundPart = null;\nfor (let building of buildings) {\n    if (building.buildingParts) {\n        foundPart = findBuildingPartById(building.buildingParts, buildingPartId);\n        if (foundPart) break;\n    }\n}\n\nif (foundPart) {\n    msg.payload = foundPart;\n} else {\n    msg.payload = { error: `Building part with id '${buildingPartId}' not found.` };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 340,
        "wires": [
            [
                "513f08822ac5a09a"
            ]
        ]
    },
    {
        "id": "513f08822ac5a09a",
        "type": "delay",
        "z": "334b2a9f8565f79d",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 440,
        "wires": [
            [
                "2570eeb4e26197f4"
            ]
        ]
    },
    {
        "id": "227b61fe0c3f3ede",
        "type": "http in",
        "z": "d0cf828cb89c2dcd",
        "name": "GET building-part documents",
        "url": "/api/building-part/:id/documents",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 160,
        "wires": [
            [
                "5710296329ebc5b1"
            ]
        ]
    },
    {
        "id": "53494e7a6a417d0e",
        "type": "function",
        "z": "d0cf828cb89c2dcd",
        "name": "extract documents",
        "func": "var buildingPartId = msg.req.params.id;  // Extract part ID from URL\nvar buildings = msg.payload;  // Loaded JSON file\n\n// Recursive search to find the building part with the given ID\nfunction findBuildingPartById(parts, id) {\n    for (let part of parts) {\n        if (part.id === id) return part;\n        if (part.buildingParts) {\n            const found = findBuildingPartById(part.buildingParts, id);\n            if (found) return found;\n        }\n    }\n    return null;\n}\n\nlet foundPart = null;\nfor (let building of buildings) {\n    if (building.buildingParts) {\n        foundPart = findBuildingPartById(building.buildingParts, buildingPartId);\n        if (foundPart) break;\n    }\n}\n\nif (foundPart) {\n    // Filter only direct children that are documents\n    let documents = [];\n    if (foundPart.buildingParts && Array.isArray(foundPart.buildingParts)) {\n        documents = foundPart.buildingParts.filter(p => p.type === \"document\");\n    }\n    msg.payload = documents;\n} else {\n    msg.payload = { error: `Building part with id '${buildingPartId}' not found.` };\n    msg.statusCode = 404;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 360,
        "wires": [
            [
                "a4e5785afd8adbf4"
            ]
        ]
    },
    {
        "id": "a4e5785afd8adbf4",
        "type": "http response",
        "z": "d0cf828cb89c2dcd",
        "name": "documents response",
        "statusCode": "",
        "headers": {},
        "x": 460,
        "y": 460,
        "wires": []
    },
    {
        "id": "5710296329ebc5b1",
        "type": "file in",
        "z": "d0cf828cb89c2dcd",
        "name": "buildings.json",
        "filename": "/data/buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 220,
        "y": 260,
        "wires": [
            [
                "94c35f8a852da9df"
            ]
        ]
    },
    {
        "id": "94c35f8a852da9df",
        "type": "json",
        "z": "d0cf828cb89c2dcd",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 390,
        "y": 260,
        "wires": [
            [
                "53494e7a6a417d0e"
            ]
        ]
    },
    {
        "id": "0886b77e488fa7c2",
        "type": "comment",
        "z": "d0cf828cb89c2dcd",
        "name": "http://localhost:1880/api/building-part/ID/documents",
        "info": "",
        "x": 270,
        "y": 100,
        "wires": []
    },
    {
        "id": "ceb57d29adfd0ee4",
        "type": "comment",
        "z": "d0cf828cb89c2dcd",
        "name": "mock: fetch documents for building-part with param ID",
        "info": "",
        "x": 760,
        "y": 300,
        "wires": []
    },
    {
        "id": "d249ba527f529b86",
        "type": "http in",
        "z": "364c116a7e63a2e0",
        "name": "GET building parts",
        "url": "/api/building-part/:id/parts",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 140,
        "wires": [
            [
                "1d5616c4b98cc3a5"
            ]
        ]
    },
    {
        "id": "068f5c5ee52a56eb",
        "type": "function",
        "z": "364c116a7e63a2e0",
        "name": "extract building parts",
        "func": "var buildingPartId = msg.req.params.id;  // Extract building part ID from URL\nvar buildings = msg.payload;  // Loaded JSON file\n\n// Recursive function to find the building part with the given ID\nfunction findBuildingPartById(parts, id) {\n    for (let part of parts) {\n        if (part.id === id) return part;\n        if (part.buildingParts) {\n            const found = findBuildingPartById(part.buildingParts, id);\n            if (found) return found;\n        }\n    }\n    return null;\n}\n\n// Search all buildings\nlet foundPart = null;\nfor (let building of buildings) {\n    if (building.buildingParts) {\n        foundPart = findBuildingPartById(building.buildingParts, buildingPartId);\n        if (foundPart) break;\n    }\n}\n\nif (foundPart) {\n    // Only return direct children that are of type \"building_part\"\n    msg.payload = (foundPart.buildingParts || []).filter(part => part.type === \"building_part\");\n} else {\n    msg.payload = { error: `Building part with id '${buildingPartId}' not found.` };\n    msg.statusCode = 404;\n}\n\nreturn [msg];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 340,
        "wires": [
            [
                "175b6e89deebad3e"
            ]
        ]
    },
    {
        "id": "175b6e89deebad3e",
        "type": "http response",
        "z": "364c116a7e63a2e0",
        "name": "parts response",
        "statusCode": "",
        "headers": {},
        "x": 480,
        "y": 440,
        "wires": []
    },
    {
        "id": "1d5616c4b98cc3a5",
        "type": "file in",
        "z": "364c116a7e63a2e0",
        "name": "buildings.json",
        "filename": "/data/buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 240,
        "y": 240,
        "wires": [
            [
                "ce27f24ade0ec561"
            ]
        ]
    },
    {
        "id": "ce27f24ade0ec561",
        "type": "json",
        "z": "364c116a7e63a2e0",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 410,
        "y": 240,
        "wires": [
            [
                "068f5c5ee52a56eb"
            ]
        ]
    },
    {
        "id": "5ee257859f521d60",
        "type": "comment",
        "z": "364c116a7e63a2e0",
        "name": "http://localhost:1880/api/building-part/ID/parts",
        "info": "",
        "x": 270,
        "y": 80,
        "wires": []
    },
    {
        "id": "9b41b3fb6addd03a",
        "type": "comment",
        "z": "364c116a7e63a2e0",
        "name": "mock: fetch parts for building-part with param ID",
        "info": "",
        "x": 760,
        "y": 280,
        "wires": []
    },
    {
        "id": "202af4e4ff054da0",
        "type": "http in",
        "z": "494a592c87260810",
        "name": "GET user-specific building data",
        "url": "/api/user/:UID/buildings/:BID/data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "790662da6c3641fa"
            ]
        ]
    },
    {
        "id": "7be045fcc2485d0b",
        "type": "function",
        "z": "494a592c87260810",
        "name": "check if building exists in user buildings",
        "func": "var buildingId = parseInt(msg.req.params.BID);  // Extract building ID from URL\nvar userId = msg.req.params.UID;  // Extract user ID from URL\nvar userBuildings = msg.payload;  // Loaded JSON file\n\n// Find the matching entry\nvar userBuilding = userBuildings.find(ub => ub.userId === userId && ub.buildingId === buildingId);\n\nif (!userBuilding) {\n    // No match found -> return name and address as null\n    msg.payload = {\n        name: null,\n        address: null\n    };\n    msg.statusCode = 200;  // It's a valid request, just no user-specific data\n    return msg;\n}\n\n// Match found -> return name and address (if they exist) or null if missing\nmsg.payload = {\n    name: userBuilding.name || null,\n    address: userBuilding.address || null\n};\n\nmsg.statusCode = 200;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 360,
        "wires": [
            [
                "28d390d5ba3f6246"
            ]
        ]
    },
    {
        "id": "1eede441926c0df5",
        "type": "http response",
        "z": "494a592c87260810",
        "name": "building in user response",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 460,
        "wires": []
    },
    {
        "id": "790662da6c3641fa",
        "type": "file in",
        "z": "494a592c87260810",
        "name": "user_buildings.json",
        "filename": "/data/user_buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 230,
        "y": 260,
        "wires": [
            [
                "47aa9aa1d6055373"
            ]
        ]
    },
    {
        "id": "47aa9aa1d6055373",
        "type": "json",
        "z": "494a592c87260810",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 390,
        "y": 260,
        "wires": [
            [
                "7be045fcc2485d0b"
            ]
        ]
    },
    {
        "id": "7a308b09bfae9098",
        "type": "comment",
        "z": "494a592c87260810",
        "name": "http://localhost:1880/api/user/UID/buildings/BID/details",
        "info": "",
        "x": 280,
        "y": 100,
        "wires": []
    },
    {
        "id": "d164877e5828f8ab",
        "type": "comment",
        "z": "494a592c87260810",
        "name": "mock: fetch user-specific building data",
        "info": "",
        "x": 710,
        "y": 300,
        "wires": []
    },
    {
        "id": "28d390d5ba3f6246",
        "type": "delay",
        "z": "494a592c87260810",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 460,
        "wires": [
            [
                "1eede441926c0df5"
            ]
        ]
    },
    {
        "id": "faa427dade4613c2",
        "type": "http in",
        "z": "f85e317b58138888",
        "name": "POST user-specific building data",
        "url": "/api/user/:UID/buildings/:BID/data",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 330,
        "y": 200,
        "wires": [
            [
                "75273458573b2e65"
            ]
        ]
    },
    {
        "id": "f5c6922760c1d470",
        "type": "function",
        "z": "f85e317b58138888",
        "name": "create list entry and append to user buildings data",
        "func": "var buildingId = parseInt(msg.req.params.BID);  // Extract building ID from URL\nvar userId = msg.req.params.UID;  // Extract user ID from URL\nvar userBuildings = msg.userBuildings;  // Loaded JSON file\n\n// Extract name and address from request body\nvar name = msg.payload.name ?? null;\nvar address = msg.payload.address ?? null;\n\n// Build new entry\nvar newEntry = {\n    userId: userId,\n    buildingId: buildingId,\n    name: name,\n    address: address\n};\n\n// Append new entry\nuserBuildings.push(newEntry);\n\n// Prepare messages for outputs\nvar msgFile = { ...msg }; // Copy message for file writing\nmsgFile.payload = JSON.stringify(userBuildings, null, 2); // Save as nicely formatted JSON\n\n//var msgResponse = { payload: newEntry }; // Return only the new entry\n//return [msgFile, msgResponse];\n\nmsg.statusCode = 200;\nmsg.payload = newEntry;\n\nreturn [msgFile, msg];\n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 520,
        "wires": [
            [
                "466d38a4ec1a0352"
            ],
            [
                "78ff2d6ec1e00377",
                "abfbd1601294ddee"
            ]
        ]
    },
    {
        "id": "d75c46e8ee472ada",
        "type": "http response",
        "z": "f85e317b58138888",
        "name": "building in user response",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 580,
        "wires": []
    },
    {
        "id": "75273458573b2e65",
        "type": "file in",
        "z": "f85e317b58138888",
        "name": "user_buildings.json",
        "filename": "/data/user_buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 330,
        "y": 300,
        "wires": [
            [
                "d334ae99795eeaf4"
            ]
        ]
    },
    {
        "id": "d334ae99795eeaf4",
        "type": "json",
        "z": "f85e317b58138888",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 300,
        "wires": [
            [
                "8c1f7abe123f44ff"
            ]
        ]
    },
    {
        "id": "30cb62a495ba5a64",
        "type": "comment",
        "z": "f85e317b58138888",
        "name": "http://localhost:1880/api/user/UID/buildings/BID/data",
        "info": "",
        "x": 370,
        "y": 140,
        "wires": []
    },
    {
        "id": "49f75b90573c3dff",
        "type": "comment",
        "z": "f85e317b58138888",
        "name": "mock: create user-specific building data",
        "info": "",
        "x": 830,
        "y": 360,
        "wires": []
    },
    {
        "id": "78ff2d6ec1e00377",
        "type": "delay",
        "z": "f85e317b58138888",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 870,
        "y": 580,
        "wires": [
            [
                "d75c46e8ee472ada"
            ]
        ]
    },
    {
        "id": "466d38a4ec1a0352",
        "type": "file",
        "z": "f85e317b58138888",
        "name": "updated user_buildings.json",
        "filename": "/data/user_buildings.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 900,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "abfbd1601294ddee",
        "type": "debug",
        "z": "f85e317b58138888",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 660,
        "wires": []
    },
    {
        "id": "8c1f7abe123f44ff",
        "type": "function",
        "z": "f85e317b58138888",
        "name": "pre-function",
        "func": "msg.userBuildings = msg.payload;\nmsg.payload = msg.req.body;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 400,
        "wires": [
            [
                "f5c6922760c1d470"
            ]
        ]
    },
    {
        "id": "ce080e9bb9edb12d",
        "type": "http in",
        "z": "cd2a82c3ad69ca34",
        "name": "PUT user-specific building data",
        "url": "/api/user/:UID/buildings/:BID/data",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 160,
        "wires": [
            [
                "efd4aba11d1fbc58"
            ]
        ]
    },
    {
        "id": "2a4e92211ea6c8a6",
        "type": "function",
        "z": "cd2a82c3ad69ca34",
        "name": "create list entry and append to user buildings data",
        "func": "var buildingId = parseInt(msg.req.params.BID);  // Extract building ID from URL\nvar userId = msg.req.params.UID;  // Extract user ID from URL\nvar userBuildings = msg.userBuildings;  // Loaded JSON file\n\n// Extract name and address from request body\nvar name = msg.payload.name ?? null;\nvar address = msg.payload.address ?? null;\n\n// Build new entry\nvar newEntry = {\n    userId: userId,\n    buildingId: buildingId,\n    name: name,\n    address: address\n};\n\n// Append new entry\nuserBuildings.push(newEntry);\n\n// Prepare messages for outputs\nvar msgFile = { ...msg }; // Copy message for file writing\nmsgFile.payload = JSON.stringify(userBuildings, null, 2); // Save as nicely formatted JSON\n\n//var msgResponse = { payload: newEntry }; // Return only the new entry\n//return [msgFile, msgResponse];\n\nmsg.statusCode = 200;\nmsg.payload = newEntry;\n\nreturn [msgFile, msg];\n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 480,
        "wires": [
            [
                "0f642e31bd912756"
            ],
            [
                "047c8ee516c3fedf",
                "35eea487f0922139"
            ]
        ]
    },
    {
        "id": "2ad3445420e18398",
        "type": "http response",
        "z": "cd2a82c3ad69ca34",
        "name": "building in user response",
        "statusCode": "",
        "headers": {},
        "x": 1070,
        "y": 540,
        "wires": []
    },
    {
        "id": "efd4aba11d1fbc58",
        "type": "file in",
        "z": "cd2a82c3ad69ca34",
        "name": "user_buildings.json",
        "filename": "/data/user_buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 310,
        "y": 260,
        "wires": [
            [
                "1ba883759f43ecb2"
            ]
        ]
    },
    {
        "id": "1ba883759f43ecb2",
        "type": "json",
        "z": "cd2a82c3ad69ca34",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 470,
        "y": 260,
        "wires": [
            [
                "187f56ed08f35985"
            ]
        ]
    },
    {
        "id": "698d9a66113794d2",
        "type": "comment",
        "z": "cd2a82c3ad69ca34",
        "name": "http://localhost:1880/api/user/UID/buildings/BID/data",
        "info": "",
        "x": 350,
        "y": 100,
        "wires": []
    },
    {
        "id": "db287f4f6647a377",
        "type": "comment",
        "z": "cd2a82c3ad69ca34",
        "name": "mock: create user-specific building data",
        "info": "",
        "x": 810,
        "y": 320,
        "wires": []
    },
    {
        "id": "047c8ee516c3fedf",
        "type": "delay",
        "z": "cd2a82c3ad69ca34",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 850,
        "y": 540,
        "wires": [
            [
                "2ad3445420e18398"
            ]
        ]
    },
    {
        "id": "0f642e31bd912756",
        "type": "file",
        "z": "cd2a82c3ad69ca34",
        "name": "updated user_buildings.json",
        "filename": "/data/user_buildings.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 880,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "35eea487f0922139",
        "type": "debug",
        "z": "cd2a82c3ad69ca34",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 620,
        "wires": []
    },
    {
        "id": "187f56ed08f35985",
        "type": "function",
        "z": "cd2a82c3ad69ca34",
        "name": "pre-function",
        "func": "msg.userBuildings = msg.payload;\nmsg.payload = msg.req.body;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 360,
        "wires": [
            [
                "2a4e92211ea6c8a6"
            ]
        ]
    }
]