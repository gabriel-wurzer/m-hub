[
    {
        "id": "e8d2c400a518975b",
        "type": "tab",
        "label": "API",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "27011c5e3f9c0442",
        "type": "tab",
        "label": "Building by ID",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bc8f71868ee8d8a0",
        "type": "tab",
        "label": "Documents by Building",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "38f9cc6750f8eb6f",
        "type": "tab",
        "label": "Parts by Building",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "334b2a9f8565f79d",
        "type": "tab",
        "label": "Part by ID",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1248ce57789522dd",
        "type": "http in",
        "z": "e8d2c400a518975b",
        "name": "GET /test",
        "url": "/test",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 40,
        "wires": [
            [
                "9c7509f21076669f"
            ]
        ]
    },
    {
        "id": "9c7509f21076669f",
        "type": "template",
        "z": "e8d2c400a518975b",
        "name": "hello world (html)",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<html>\n    <head></head>\n    <body>\n        <h1>Hello World!</h1>\n    </body>\n</html>",
        "output": "str",
        "x": 290,
        "y": 40,
        "wires": [
            [
                "625e6556c0ae06ae"
            ]
        ]
    },
    {
        "id": "625e6556c0ae06ae",
        "type": "http response",
        "z": "e8d2c400a518975b",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 480,
        "y": 40,
        "wires": []
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "67e242a6fdfa39b6",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "open ifc file and convert to JSON",
        "func": "const ifcData = msg.payload\nconst ifcBuffer = new Uint8Array(ifcData)\nconst modelID = context.get(\"webIfc\").OpenModel(ifcBuffer)\nconst fragments = context.get(\"components\").get(OBC.FragmentsManager);\nconst fragmentIfcLoader = context.get(\"components\").get(OBC.IfcLoader);\nconst exported = await context.get(\"exporter\").export(context.get(\"webIfc\"), modelID)\ncontext.get(\"webIfc\").CloseModel(modelID)\nmsg.payload = exported\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Der Code hier wird ausgefÃ¼hrt,\n// wenn der Node gestartet wird\nconst components = new OBC.Components()\n//components.init()\ncontext.set(\"components\", components)\nconst exporter = components.get(OBC.IfcJsonExporter)\ncontext.set(\"exporter\", exporter)\n//node.log(JSON.stringify(exporter))\nconst webIfc = new WEBIFC.IfcAPI()\n//webIfc.SetWasmPath(\"https://unpkg.com/web-ifc@0.0.57/\", true)\n//webIfc.SetWasmPath(\"\",false)\n//node.log(util.inspect(webIfc))\nawait webIfc.Init()\ncontext.set(\"webIfc\", webIfc)\n//node.log(JSON.stringify(webIfc))\n//node.log('setup completed')\n",
        "finalize": "",
        "libs": [
            {
                "var": "OBC",
                "module": "@thatopen/components"
            },
            {
                "var": "WEBIFC",
                "module": "web-ifc"
            }
        ],
        "x": 220,
        "y": 280,
        "wires": [
            [
                "dd4e97322180a29f"
            ]
        ]
    },
    {
        "id": "29efd0853df6ee13",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "b8effc12f971c9b9"
            ]
        ]
    },
    {
        "id": "b8effc12f971c9b9",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "https://thatopen.github.io/engine_components/resources/small.ifc",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 310,
        "y": 220,
        "wires": [
            [
                "67e242a6fdfa39b6"
            ]
        ]
    },
    {
        "id": "284c6fc27e3ce9c2",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 340,
        "wires": []
    },
    {
        "id": "dd4e97322180a29f",
        "type": "file",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "filename": "/data/test.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 400,
        "y": 340,
        "wires": [
            [
                "284c6fc27e3ce9c2"
            ]
        ]
    },
    {
        "id": "e8ad80e4d0f32511",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "download https://thatopen.github.io/engine_components/resources/small.ifc",
        "info": "",
        "x": 500,
        "y": 180,
        "wires": []
    },
    {
        "id": "e49eac9b2532b6c4",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "save as test.json",
        "info": "",
        "x": 400,
        "y": 380,
        "wires": []
    },
    {
        "id": "2ad372cdad61e38b",
        "type": "http in",
        "z": "27011c5e3f9c0442",
        "name": "GET building",
        "url": "/api/building/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "1ffa461e79c2a7a7"
            ]
        ]
    },
    {
        "id": "0d8b2076de2cb5f5",
        "type": "function",
        "z": "27011c5e3f9c0442",
        "name": "find building by id",
        "func": "var buildingId = parseInt(msg.req.params.id);  // Extract building ID from URL\nvar buildings = msg.payload;  // Loaded JSON file\n\n// Find the building with the correct \"bw_geb_id\"\nvar building = buildings.find(b => b.bw_geb_id === buildingId);\n\nif (!building) {\n    msg.payload = { error: \"Building not found\" };\n    msg.statusCode = 404;\n    return [msg];\n}\n\n// Apply filtering\nmsg.payload = building;\n\nreturn [msg];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 360,
        "wires": [
            [
                "f301ee9a5dbd2bad"
            ]
        ]
    },
    {
        "id": "8f927269b5342aec",
        "type": "http response",
        "z": "27011c5e3f9c0442",
        "name": "building response",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 460,
        "wires": []
    },
    {
        "id": "1ffa461e79c2a7a7",
        "type": "file in",
        "z": "27011c5e3f9c0442",
        "name": "buildings.json",
        "filename": "/data/buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 240,
        "y": 260,
        "wires": [
            [
                "b3523b0ca03c53b8"
            ]
        ]
    },
    {
        "id": "b3523b0ca03c53b8",
        "type": "json",
        "z": "27011c5e3f9c0442",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 410,
        "y": 260,
        "wires": [
            [
                "0d8b2076de2cb5f5"
            ]
        ]
    },
    {
        "id": "320ab5806cc47a5d",
        "type": "comment",
        "z": "27011c5e3f9c0442",
        "name": "http://localhost:1880/api/building/ID",
        "info": "",
        "x": 240,
        "y": 100,
        "wires": []
    },
    {
        "id": "ed2ad698a995b590",
        "type": "comment",
        "z": "27011c5e3f9c0442",
        "name": "mock: fetch building with param ID",
        "info": "",
        "x": 720,
        "y": 300,
        "wires": []
    },
    {
        "id": "f301ee9a5dbd2bad",
        "type": "delay",
        "z": "27011c5e3f9c0442",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 460,
        "y": 460,
        "wires": [
            [
                "8f927269b5342aec"
            ]
        ]
    },
    {
        "id": "3c129ba07320274b",
        "type": "http in",
        "z": "bc8f71868ee8d8a0",
        "name": "GET building documents",
        "url": "/api/building/:id/documents",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "cb482042e1d86a02"
            ]
        ]
    },
    {
        "id": "49d964f8fce72ce6",
        "type": "function",
        "z": "bc8f71868ee8d8a0",
        "name": "extract documents",
        "func": "var buildingId = parseInt(msg.req.params.id);  // Extract building ID from URL\nvar buildings = msg.payload;  // Loaded JSON file\n\n// Find the building with the correct \"bw_geb_id\"\nvar building = buildings.find(b => b.bw_geb_id === buildingId);\n\nif (!building) {\n    msg.payload = { error: \"Building not found\" };\n    msg.statusCode = 404;\n    return [msg];\n}\n\n// Function to recursively collect documents from building parts\nfunction collectDocuments(parts) {\n    let documents = [];\n    for (let part of parts) {\n        if (part.type === \"document\") {\n            documents.push(part);\n        }\n        if (part.buildingParts && part.buildingParts.length > 0) {\n            documents = documents.concat(collectDocuments(part.buildingParts));\n        }\n    }\n    return documents;\n}\n\n// Extract all documents\nmsg.payload = collectDocuments(building.buildingParts);\nreturn [msg];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 400,
        "wires": [
            [
                "913d48767b346272"
            ]
        ]
    },
    {
        "id": "913d48767b346272",
        "type": "http response",
        "z": "bc8f71868ee8d8a0",
        "name": "documents response",
        "statusCode": "",
        "headers": {},
        "x": 400,
        "y": 500,
        "wires": []
    },
    {
        "id": "cb482042e1d86a02",
        "type": "file in",
        "z": "bc8f71868ee8d8a0",
        "name": "buildings.json",
        "filename": "/data/buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 160,
        "y": 300,
        "wires": [
            [
                "4254b6e7778df55b"
            ]
        ]
    },
    {
        "id": "4254b6e7778df55b",
        "type": "json",
        "z": "bc8f71868ee8d8a0",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 300,
        "wires": [
            [
                "49d964f8fce72ce6"
            ]
        ]
    },
    {
        "id": "b8b50779ec0b04a0",
        "type": "comment",
        "z": "bc8f71868ee8d8a0",
        "name": "http://localhost:1880/api/building/ID/documents",
        "info": "",
        "x": 190,
        "y": 140,
        "wires": []
    },
    {
        "id": "521eb13470c47853",
        "type": "comment",
        "z": "bc8f71868ee8d8a0",
        "name": "mock: fetch documents for building with param ID",
        "info": "",
        "x": 680,
        "y": 340,
        "wires": []
    },
    {
        "id": "f24d3eb7fd564ece",
        "type": "http in",
        "z": "38f9cc6750f8eb6f",
        "name": "GET building parts",
        "url": "/api/building/:id/parts",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 180,
        "wires": [
            [
                "7c9eecbf76fd44f4"
            ]
        ]
    },
    {
        "id": "90f4d4ea437e84c0",
        "type": "function",
        "z": "38f9cc6750f8eb6f",
        "name": "extract building parts",
        "func": "var buildingId = parseInt(msg.req.params.id);  // Extract building ID from URL\nvar buildings = msg.payload;  // Loaded JSON file\n\n// Find the building with the correct \"bw_geb_id\"\nvar building = buildings.find(b => b.bw_geb_id === buildingId);\n\nif (!building) {\n    msg.payload = { error: \"Building not found\" };\n    msg.statusCode = 404;\n    return [msg];\n}\n\n// Recursive function to **filter** building parts while maintaining hierarchy\nfunction filterBuildingParts(parts) {\n    return parts\n        .filter(part => part.type === \"building_part\")  // Keep only \"building_part\"\n        .map(part => ({\n            ...part,\n            buildingParts: filterBuildingParts(part.buildingParts || []) // Recursively filter children\n        }));\n}\n\n// Apply filtering\nmsg.payload = filterBuildingParts(building.buildingParts || []);\n\nreturn [msg];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 380,
        "wires": [
            [
                "541d93095bb5472d"
            ]
        ]
    },
    {
        "id": "541d93095bb5472d",
        "type": "http response",
        "z": "38f9cc6750f8eb6f",
        "name": "parts response",
        "statusCode": "",
        "headers": {},
        "x": 500,
        "y": 480,
        "wires": []
    },
    {
        "id": "7c9eecbf76fd44f4",
        "type": "file in",
        "z": "38f9cc6750f8eb6f",
        "name": "buildings.json",
        "filename": "/data/buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 260,
        "y": 280,
        "wires": [
            [
                "426d12c6563467b5"
            ]
        ]
    },
    {
        "id": "426d12c6563467b5",
        "type": "json",
        "z": "38f9cc6750f8eb6f",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 430,
        "y": 280,
        "wires": [
            [
                "90f4d4ea437e84c0"
            ]
        ]
    },
    {
        "id": "aca210ea30b6f97f",
        "type": "comment",
        "z": "38f9cc6750f8eb6f",
        "name": "http://localhost:1880/api/building/ID/parts",
        "info": "",
        "x": 280,
        "y": 120,
        "wires": []
    },
    {
        "id": "581b56679cf62dc8",
        "type": "comment",
        "z": "38f9cc6750f8eb6f",
        "name": "mock: fetch parts for building with param ID",
        "info": "",
        "x": 760,
        "y": 320,
        "wires": []
    },
    {
        "id": "01d1ad3529f51439",
        "type": "http in",
        "z": "334b2a9f8565f79d",
        "name": "GET building-part",
        "url": "/api/building-part/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "60eea413552f2d46"
            ]
        ]
    },
    {
        "id": "2570eeb4e26197f4",
        "type": "http response",
        "z": "334b2a9f8565f79d",
        "name": "building-part response",
        "statusCode": "",
        "headers": {},
        "x": 720,
        "y": 440,
        "wires": []
    },
    {
        "id": "60eea413552f2d46",
        "type": "file in",
        "z": "334b2a9f8565f79d",
        "name": "buildings.json",
        "filename": "/data/buildings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 200,
        "y": 240,
        "wires": [
            [
                "7b2ee4e7b5864abe"
            ]
        ]
    },
    {
        "id": "7b2ee4e7b5864abe",
        "type": "json",
        "z": "334b2a9f8565f79d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 370,
        "y": 240,
        "wires": [
            [
                "bda01bb61954ae53"
            ]
        ]
    },
    {
        "id": "c2640dc94c04f102",
        "type": "comment",
        "z": "334b2a9f8565f79d",
        "name": "http://localhost:1880/api/building-part/ID",
        "info": "",
        "x": 210,
        "y": 80,
        "wires": []
    },
    {
        "id": "c0292531d792070b",
        "type": "comment",
        "z": "334b2a9f8565f79d",
        "name": "mock: fetch building-part with param ID",
        "info": "",
        "x": 690,
        "y": 280,
        "wires": []
    },
    {
        "id": "bda01bb61954ae53",
        "type": "function",
        "z": "334b2a9f8565f79d",
        "name": "find building-part by id",
        "func": "var buildingPartId = msg.req.params.id;  // Extract building ID from URL\nvar buildings = msg.payload;  // Loaded JSON file\n\nfunction findBuildingPartById(parts, id) {\n    for (let part of parts) {\n        if (part.id === id) return part;\n        if (part.buildingParts) {\n            const found = findBuildingPartById(part.buildingParts, id);\n            if (found) return found;\n        }\n    }\n    return null;\n}\n\n// Search through each building\nlet foundPart = null;\nfor (let building of buildings) {\n    if (building.buildingParts) {\n        foundPart = findBuildingPartById(building.buildingParts, buildingPartId);\n        if (foundPart) break;\n    }\n}\n\nif (foundPart) {\n    msg.payload = foundPart;\n} else {\n    msg.payload = { error: `Building part with id '${buildingPartId}' not found.` };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 340,
        "wires": [
            [
                "513f08822ac5a09a"
            ]
        ]
    },
    {
        "id": "513f08822ac5a09a",
        "type": "delay",
        "z": "334b2a9f8565f79d",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 440,
        "wires": [
            [
                "2570eeb4e26197f4"
            ]
        ]
    }
]